parser grammar CSharpPreprocessorParser;
options { tokenVocab = CSharpLexer; superClass = CSharpPreprocessorParserBase;  }
preprocessor_directive: DEFINE CONDITIONAL_SYMBOL directive_new_line_or_sharp # preprocessorDeclaration | UNDEF CONDITIONAL_SYMBOL directive_new_line_or_sharp # preprocessorDeclaration | IF expr=preprocessor_expression directive_new_line_or_sharp # preprocessorConditional | ELIF expr=preprocessor_expression directive_new_line_or_sharp # preprocessorConditional | ELSE directive_new_line_or_sharp # preprocessorConditional | ENDIF directive_new_line_or_sharp # preprocessorConditional | LINE ( DIGITS STRING? | DEFAULT | DIRECTIVE_HIDDEN ) directive_new_line_or_sharp # preprocessorLine | ERROR TEXT directive_new_line_or_sharp # preprocessorDiagnostic | WARNING TEXT directive_new_line_or_sharp # preprocessorDiagnostic | REGION TEXT? directive_new_line_or_sharp # preprocessorRegion | ENDREGION TEXT? directive_new_line_or_sharp # preprocessorRegion | PRAGMA TEXT directive_new_line_or_sharp # preprocessorPragma | NULLABLE TEXT directive_new_line_or_sharp # preprocessorNullable;
directive_new_line_or_sharp: DIRECTIVE_NEW_LINE | EOF;
preprocessor_expression: TRUE | FALSE | CONDITIONAL_SYMBOL | OPEN_PARENS expr=preprocessor_expression CLOSE_PARENS | BANG expr=preprocessor_expression | expr1=preprocessor_expression OP_EQ expr2=preprocessor_expression | expr1=preprocessor_expression OP_NE expr2=preprocessor_expression | expr1=preprocessor_expression OP_AND expr2=preprocessor_expression | expr1=preprocessor_expression OP_OR expr2=preprocessor_expression;
